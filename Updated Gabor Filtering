
#Importing required libraries
import cv2 as cv
import numpy as np
import pandas as pd
import os

def normalize_image(image):
    min_val = np.min(image)
    max_val = np.max(image)
    normalized_image = (image - min_val) / (max_val - min_val)
    return normalized_image

def standardize_image(normalized_image):
    mean_val = np.mean(normalized_image)
    std_val = np.std(normalized_image)
    standardized_image = (normalized_image - mean_val) 
    return standardized_image

def build_filters(sigma):
    num_filters = 8
    filters = [] 
    thetas = []
    ksize = 15  # Keep kernel size fixed
    for theta in np.arange(0, np.pi, np.pi / num_filters):
        kern = cv.getGaborKernel((ksize, ksize), sigma, theta, 8.0, 0.5, 0, ktype=cv.CV_32F)
        kern /= 1.5 * kern.sum()
        filters.append(kern)
        thetas.append(theta)
    return filters, thetas

def process(image, filters):
    filter_responses = []
    standardized_responses = []
    energies = []
    s_energies = []
    for kern in filters:
        fimg = cv.filter2D(image, cv.CV_8UC3, kern)
        filter_responses.append(fimg)
        
        normalized_fimg = normalize_image(fimg)
        standardized_fimg = standardize_image(normalized_fimg)
        standardized_responses.append(standardized_fimg)
        
        m, n = image.shape
        energy = np.sum(fimg**2) / (m * n)
        s_m, s_n = standardized_fimg.shape
        s_energy = np.sum(standardized_fimg**2) / (s_m * s_n)
        
        energies.append(energy)
        s_energies.append(s_energy)
        
    return filter_responses, energies, standardized_responses, s_energies

# Reading the input image
image = cv.imread('36.jpg', cv.IMREAD_GRAYSCALE)

# Loop over sigma values from 2 to 12
for sigma in range(2, 13):
    print(f"Processing sigma={sigma}")
    
    # Building filters with current sigma
    filters, thetas = build_filters(sigma)
    
    # Processing the image with filters
    filter_responses, energies, standardized_responses, s_energies = process(image, filters)
    
    # Calculating median and average of energies
    median_energy = np.median(energies)
    average_energy = np.mean(energies)
    
    # Calculating median and average of standardized energies
    s_median_energy = np.median(s_energies)
    s_average_energy = np.mean(s_energies)
    
    print(f'Median of energies (sigma={sigma}): {median_energy}')
    print(f'Average of energies (sigma={sigma}): {average_energy}')
    print(f'Median of standardized energies (sigma={sigma}): {s_median_energy}')
    print(f'Average of standardized energies (sigma={sigma}): {s_average_energy}')
    
    # Creating directories for storing results
    folder_path = f'Gabor k15/l18/s_{sigma}/'
    os.makedirs(folder_path, exist_ok=True)
    
    # Saving energies and standardized energies to Excel
    energies_df = pd.DataFrame(energies, columns=['Energy'])
    energies_df.to_excel(f'{folder_path}/filter_energies_s_{sigma}.xlsx', index=False)
    
    thetas_df = pd.DataFrame(thetas, columns=['Theta'])
    thetas_df.to_excel(f'{folder_path}/thetas_s_{sigma}.xlsx', index=False)
    
    s_energies_df = pd.DataFrame(s_energies, columns=['S_Energy'])
    s_energies_df.to_excel(f'{folder_path}/s_energies_s_{sigma}.xlsx', index=False)
    
    # Displaying and saving filter responses
    for i, response in enumerate(filter_responses):
        newimage = cv.normalize(response, None, 0, 255, cv.NORM_MINMAX)
        newimage = newimage.astype(np.uint8)
        cv.imwrite(f'{folder_path}/k15_l8_s_{sigma}_g_f_{i+1}.jpg', newimage)

cv.waitKey(0)
cv.destroyAllWindows()
