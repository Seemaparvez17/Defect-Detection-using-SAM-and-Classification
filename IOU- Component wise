#importing required libraries
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function for calculating IoU for two corresponding components
def calculate_iou(component1, component2):
    intersection = np.logical_and(component1, component2).sum()
    union = np.logical_or(component1, component2).sum()
    if union == 0:  # To avoid division by zero
        return 0
    return intersection / union

labels1, num_labels1 = isolate_components(image_path1)
labels2, num_labels2 = isolate_components(image_path2)

# Ensuring both images have the same number of components
if num_labels1 != num_labels2:
    print(f"Warning: Number of components differs between images! ({num_labels1} vs {num_labels2})")

# Calculating IoU for each component (we assume corresponding labels have the same index)
ious = []
for i in range(1, min(num_labels1, num_labels2)):  # Skip background (label 0)
    component1 = (labels1 == i).astype("uint8")
    component2 = (labels2 == i).astype("uint8")

    iou = calculate_iou(component1, component2)
    ious.append(iou)

    # Showing the corresponding components and their IoU (optional)
    plt.subplot(1, 2, 1)
    plt.imshow(component1, cmap="gray")
    plt.title(f'Component {i} - Image 1')

    plt.subplot(1, 2, 2)
    plt.imshow(component2, cmap="gray")
    plt.title(f'Component {i} - Image 2')

    plt.suptitle(f'IoU: {iou:.4f}')
    plt.show()

# Printing the IoU results
for i, iou in enumerate(ious, 1):
    print(f'Component {i}: IoU = {iou:.4f}')
